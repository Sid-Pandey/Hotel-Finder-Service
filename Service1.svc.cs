/*
Please find below the code for ELECTIVE Services. Two elective services have been developed. 

1. Hotel Finder Service:
This service takes as its input a georgraphical location and returns the 5 nearest hotels to that location. 
Here, the REST API from Yelp has been used to find the hotels of interest. 

Function signature : public List<string> GetNearestHotels(string location)

2. Add to Cart and Payment Service:
This service takes as its input a dictionary which contains the following parameters. 
1. The name of the user.
2. His address
3. His debit/credit card number
4. The amount for which he wants to make a purchase. 

It then consults a file, bankdetails.text which stores the state information, more specifically, the balance associated with each 
card number. Here, the balances have been generated by a random number service in order to simulate a real world booking system 
where we get multiple users with different bank accounts and balances. 

For every user, 
 1. If that user does not exist, an entry for that user and his balance is created in the bankdetails.txt file.
 2. If the user exists, hs balance is updated by deducting the amount in the transaction, and the updated balance is 
written back to the file.

Function signature : public String AddToCartAndPayment(Dictionary<String, String> userdetails)
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Text;
using System.Net;
using System.IO;
using Newtonsoft.Json.Linq;
using System.Web;

namespace ElectiveServices
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Service1" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select Service1.svc or Service1.svc.cs at the Solution Explorer and start debugging.
    public class Service1 : IService1
    {
        public List<string> GetNearestHotels(string location)
        {
            Console.WriteLine("Hello World!");
            string host_url = "https://api.yelp.com";
            string search = "/v3/businesses/search?term=hotels&location=" + location;
            WebRequest request = WebRequest.Create(host_url + search);
            string api_key = "xwzuY6STxBRLLklyRweWA8xDvI-JFYdz4I1-II0syfujjtwJgWiKAKWoLmUC48CQkZS04PWmvbmEoTjDHEfBjtucQO43kJeCtiw63Mky6zWQMYoG5MrdzePQalLGW3Yx";
            request.Headers.Add(String.Format("Authorization: Bearer {0}", api_key));
            WebResponse response = (HttpWebResponse)request.GetResponse();
            var stream = response.GetResponseStream();
            var sr = new StreamReader(stream);
            String hotel_response = sr.ReadToEnd();

            //Console.WriteLine(hotel_response);

            JObject hotel_data = JObject.Parse(hotel_response);  //parsing the json.
            List<string> hotelsdata = new List<string>();
            for (int i = 0; i < 5; i++)
            {
                Random rand = new Random();
                int price = rand.Next((i + 1) * 50, (i + 1) * 100);
                string address1 = hotel_data["businesses"][i]["location"]["display_address"][0].ToString();
                string address2 = hotel_data["businesses"][i]["location"]["display_address"][1].ToString();
                string address = address1 + address2;
                String data = String.Format("hotel name : {0} \nImage url : {1} \nUrl : {2} \n Rating : {3} \n Address : {4} \nPhone : {5} \n" +
                    "Room rent per night : {6}",
                    hotel_data["businesses"][i]["name"], hotel_data["businesses"][i]["image_url"]
                    , hotel_data["businesses"][i]["url"], hotel_data["businesses"][i]["rating"], address, hotel_data["businesses"][i]["display_phone"], price);
                Console.WriteLine(data);
                hotelsdata.Add(data);
            }

            return hotelsdata;
        }

        public String Transcation(String cardno, int amount)
        {
            Dictionary<String, String> accounts = new Dictionary<String, String>();
            String path = HttpRuntime.AppDomainAppPath + "bankdetails.txt";
            StreamReader reader = new StreamReader(path);
            String line;
            while ((line = reader.ReadLine()) != null)
            {
                String[] s = line.Split('\t');
                String card = s[0];
                String balance = s[1];
                accounts[card] = balance;
            }

            reader.Close();
            String message = "";

            if (!accounts.ContainsKey(cardno))
            {
                Random rand = new Random();
                accounts[cardno] = rand.Next(90000, 100000).ToString();
            }

            int account_balance = Convert.ToInt32(accounts[cardno]);
            if (account_balance < amount)
            {
                message = "Insufficient balance! Transaction cancelled";
            }
            else
            {
                account_balance -= amount;
                accounts[cardno] = Convert.ToString(account_balance);
                message = "Transaction successful. Your order has been confirmed!";
            }

            StreamWriter writer = new StreamWriter(path); 

            //Iterate through all card nos and write them back to the file.
            foreach (String card in accounts.Keys)
            {
                String l = card + "\t" + accounts[card];
                writer.WriteLine(l);
            }

            writer.Close();
            return message;
        }

        public String AddToCartAndPayment(Dictionary<String, String> userdetails)
        {
            //   StreamWriter writer = new StreamWriter();
            String receipt = "works";
            String cardno = userdetails["CardNo"];
            String amount = userdetails["Amount"];
            receipt = Transcation(cardno, Convert.ToInt32(amount));
            return receipt;
        }
    }
}
